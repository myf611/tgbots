from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards import get_main_menu, get_gender_keyboard
from bot.states import Registration
from database.connection import supabase_client


router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        response = supabase_client.table('user_profiles').select('*').eq('user_id', user_id).execute()
        
        if response.data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "ü©∫ *Telegram Medical Bot*\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
                "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
                "‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                "üë§ *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*\n"
                "–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –∏–ª–∏ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)",
                parse_mode="Markdown"
            )
            await state.set_state(Registration.waiting_for_full_name)
            
    except Exception as e:
        print(f"Database error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
        "ü©∫ *–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è*\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã, –∏ –±–æ—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
        "üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üîç *–ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞*\n"
        "–ü–æ–∏—Å–∫ –≤—Ä–∞—á–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º.\n\n"
        "üìã *–ò—Å—Ç–æ—Ä–∏—è*\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—à–ª—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n\n"
        "*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:*\n"
        "1. –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –¥–∞–≤–Ω–æ—Å—Ç—å\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è."
    )
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer(
            "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await cmd_help(message)


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è")
async def history_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò—Å—Ç–æ—Ä–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer(
        "üìã *–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π*\n\n"
        "‚è≥ –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—à–ª—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–∞–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–º–Ω–µ–∑ –≤ PDF",
        parse_mode="Markdown"
    )
