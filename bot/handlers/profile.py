from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from bot.states import Registration, EditProfile
from bot.keyboards import (
    get_main_menu,
    get_phone_keyboard,
    get_gender_keyboard,
    get_cancel_keyboard,
    get_profile_menu,
    get_edit_profile_menu
)
from database.connection import supabase_client
from services.phone_formatter import format_phone_number, get_phone_info


router = Router()


# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def parse_date(date_string: str) -> datetime:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ –≥–∏–±–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - –î–î.–ú–ú.–ì–ì–ì–ì (15.03.1990)
    - –î–î/–ú–ú/–ì–ì–ì–ì (15/03/1990)
    - –î–î –ú–ú –ì–ì–ì–ì (15 03 1990)
    """
    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ —Ç–æ—á–∫—É
    normalized = date_string.replace("/", ".").replace(" ", ".")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    try:
        return datetime.strptime(normalized, "%d.%m.%Y")
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")


# ============ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ============

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = supabase_client.table('user_profiles').select('*').eq('user_id', message.from_user.id).execute()
        
        if not response.data:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return
        
        profile = response.data[0]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        birthdate = profile.get('birthdate')
        age = None
        if birthdate:
            birthdate_obj = datetime.fromisoformat(birthdate)
            age = (datetime.now() - birthdate_obj).days // 365
            birthdate_formatted = birthdate_obj.strftime("%d.%m.%Y")
        else:
            birthdate_formatted = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª
        gender = profile.get('gender')
        gender_text = {"male": "üë® –ú—É–∂—Å–∫–æ–π", "female": "üë© –ñ–µ–Ω—Å–∫–∏–π"}.get(gender, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        profile_text += f"*–§–ò–û:* {profile.get('full_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        profile_text += f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {profile.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        profile_text += f"*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {birthdate_formatted}"
        
        if age:
            profile_text += f" ({age} –ª–µ—Ç)\n"
        else:
            profile_text += "\n"
        
        profile_text += f"*–ü–æ–ª:* {gender_text}\n"
        profile_text += f"*–†–æ—Å—Ç:* {profile.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
        profile_text += f"*–í–µ—Å:* {profile.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥"
        
        await message.answer(
            profile_text,
            reply_markup=get_profile_menu(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")


@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_from_profile(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )


# ============ –≠–¢–ê–ü 1: –§–ò–û ============

@router.message(Registration.waiting_for_full_name, F.text)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    full_name = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if len(full_name) < 3:
        await message.answer("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞
    if len(full_name.split()) < 2:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –§–∞–º–∏–ª–∏—é –∏ –ò–º—è\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        )
        return
    
    await state.update_data(full_name=full_name)
    
    await message.answer(
        f"‚úÖ –§–ò–û: {full_name}",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await message.answer(
        "üì± *–®–∞–≥ 2 –∏–∑ 6*\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
        "‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ +998 90 123 45 67\n"
        "‚Ä¢ 998901234567\n"
        "‚Ä¢ 90 123 45 67",
        reply_markup=get_phone_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Registration.waiting_for_phone)


# ============ –≠–¢–ê–ü 2: –¢–ï–õ–ï–§–û–ù ============

@router.message(Registration.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'"""
    phone = message.contact.phone_number
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    success, formatted_phone, error = format_phone_number(phone)
    
    if not success:
        await message.answer(
            f"{error}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ +998 90 123 45 67 (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)\n"
            "‚Ä¢ +7 900 123 45 67 (–†–æ—Å—Å–∏—è)\n"
            "‚Ä¢ +1 555 123 4567 (–°–®–ê)"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    phone_info = get_phone_info(phone)
    
    await state.update_data(phone=formatted_phone)
    
    # –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    info_text = f"‚úÖ *–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω:*\n\n"
    info_text += f"üì± {formatted_phone}\n"
    if phone_info.get('valid'):
        info_text += f"üåç {phone_info.get('country_name')} ({phone_info.get('country_code')})\n"
        info_text += f"üìû –¢–∏–ø: {phone_info.get('number_type')}"
    
    await message.answer(info_text, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    await message.answer(
        "üéÇ *–®–∞–≥ 3 –∏–∑ 6*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)\n"
        "–¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è: 15/03/1990 –∏–ª–∏ 15 03 1990",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Registration.waiting_for_birthdate)


@router.message(Registration.waiting_for_phone, F.text)
async def process_phone_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–º"""
    phone_input = message.text.strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    success, formatted_phone, error = format_phone_number(phone_input)
    
    if not success:
        await message.answer(
            f"{error}\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ +998 90 123 45 67 (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)\n"
            "‚Ä¢ +7 900 123 45 67 (–†–æ—Å—Å–∏—è)\n"
            "‚Ä¢ +1 555 123 4567 (–°–®–ê)\n"
            "‚Ä¢ 90 123 45 67 (–¥–ª—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞)\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    phone_info = get_phone_info(phone_input)
    
    await state.update_data(phone=formatted_phone)
    
    # –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    info_text = f"‚úÖ *–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω:*\n\n"
    info_text += f"üì± {formatted_phone}\n"
    if phone_info.get('valid'):
        info_text += f"üåç {phone_info.get('country_name')} ({phone_info.get('country_code')})\n"
        info_text += f"üìû –¢–∏–ø: {phone_info.get('number_type')}"
    
    await message.answer(info_text, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    await message.answer(
        "üéÇ *–®–∞–≥ 3 –∏–∑ 6*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)\n"
        "–¢–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è: 15/03/1990 –∏–ª–∏ 15 03 1990",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Registration.waiting_for_birthdate)


# ============ –≠–¢–ê–ü 3: –î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø ============

@router.message(Registration.waiting_for_birthdate, F.text)
async def process_birthdate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    date_string = message.text.strip()
    
    try:
        birthdate = parse_date(date_string)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if birthdate > datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return
        
        age = (datetime.now() - birthdate).days // 365
        
        if age < 1 or age > 120:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
            return
        
        await state.update_data(birthdate=birthdate.date().isoformat())
        
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate.strftime('%d.%m.%Y')} ({age} –ª–µ—Ç)",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await message.answer(
            "‚ößÔ∏è *–®–∞–≥ 4 –∏–∑ 6*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
            reply_markup=get_gender_keyboard(),
            parse_mode="Markdown"
        )
        
        await state.set_state(Registration.waiting_for_gender)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
        )


# ============ –≠–¢–ê–ü 4: –ü–û–õ ============

@router.message(Registration.waiting_for_gender, F.text.in_(["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]))
async def process_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = "male" if message.text == "üë® –ú—É–∂—Å–∫–æ–π" else "female"
    
    await state.update_data(gender=gender)
    
    await message.answer(
        f"‚úÖ –ü–æ–ª: {message.text}",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await message.answer(
        "üìè *–®–∞–≥ 5 –∏–∑ 6*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 175",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(Registration.waiting_for_height)


# ============ –≠–¢–ê–ü 5: –†–û–°–¢ ============

@router.message(Registration.waiting_for_height, F.text)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text.strip())
        
        if height < 50 or height > 250:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º)")
            return
        
        await state.update_data(height=height)
        
        await message.answer(
            f"‚úÖ –†–æ—Å—Ç: {height} —Å–º",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await message.answer(
            "‚öñÔ∏è *–®–∞–≥ 6 –∏–∑ 6*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 70",
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        
        await state.set_state(Registration.waiting_for_weight)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175)")


# ============ –≠–¢–ê–ü 6: –í–ï–° ============

@router.message(Registration.waiting_for_weight, F.text)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        weight = float(message.text.strip().replace(",", "."))
        
        if weight < 20 or weight > 300:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-300 –∫–≥)")
            return
        
        await state.update_data(weight=weight)
        
        await message.answer(
            f"‚úÖ –í–µ—Å: {weight} –∫–≥",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        data = await state.get_data()
        
        try:
            profile_data = {
                'user_id': message.from_user.id,
                'username': message.from_user.username,
                'full_name': data['full_name'],
                'phone': data['phone'],
                'birthdate': data['birthdate'],
                'gender': data['gender'],
                'height': data['height'],
                'weight': data['weight'],
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            supabase_client.table('user_profiles').insert(profile_data).execute()
            
            await message.answer(
                "üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )
            
            await state.clear()
            
        except Exception as e:
            print(f"DB Error: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /start"
            )
            await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70 –∏–ª–∏ 70.5)")


# ============ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ============

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_profile_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await message.answer(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_profile_menu(),
        parse_mode="Markdown"
    )
    
    await state.set_state(EditProfile.choosing_field)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é")
async def back_to_profile(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    await state.clear()
    await show_profile(message)


# ============ –í–´–ë–û–† –ü–û–õ–Ø –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ============

@router.message(EditProfile.choosing_field, F.text == "üë§ –§–ò–û")
async def edit_full_name_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û"""
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditProfile.waiting_for_full_name)


@router.message(EditProfile.choosing_field, F.text == "üì± –¢–µ–ª–µ—Ñ–æ–Ω")
async def edit_phone_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ +998 90 123 45 67\n"
        "‚Ä¢ +7 900 123 45 67\n"
        "‚Ä¢ 90 123 45 67",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditProfile.waiting_for_phone)


@router.message(EditProfile.choosing_field, F.text == "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
async def edit_birthdate_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await message.answer(
        "üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditProfile.waiting_for_birthdate)


@router.message(EditProfile.choosing_field, F.text == "‚ößÔ∏è –ü–æ–ª")
async def edit_gender_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∞"""
    await message.answer(
        "‚ößÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(EditProfile.waiting_for_gender)


@router.message(EditProfile.choosing_field, F.text == "üìè –†–æ—Å—Ç")
async def edit_height_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞"""
    await message.answer(
        "üìè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–º):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditProfile.waiting_for_height)


@router.message(EditProfile.choosing_field, F.text == "‚öñÔ∏è –í–µ—Å")
async def edit_weight_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞"""
    await message.answer(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–≥):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EditProfile.waiting_for_weight)


# ============ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ============

@router.message(EditProfile.waiting_for_full_name, F.text)
async def edit_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û"""
    full_name = message.text.strip()
    
    if len(full_name) < 3 or len(full_name.split()) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –§–∞–º–∏–ª–∏—é –∏ –ò–º—è")
        return
    
    try:
        supabase_client.table('user_profiles').update({
            'full_name': full_name,
            'updated_at': datetime.now().isoformat()
        }).eq('user_id', message.from_user.id).execute()
        
        await message.answer(f"‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {full_name}")
        await message.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.choosing_field)
        
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.message(EditProfile.waiting_for_phone, F.text)
async def edit_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_input = message.text.strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    success, formatted_phone, error = format_phone_number(phone_input)
    
    if not success:
        await message.answer(
            f"{error}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        phone_info = get_phone_info(phone_input)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        supabase_client.table('user_profiles').update({
            'phone': formatted_phone,
            'updated_at': datetime.now().isoformat()
        }).eq('user_id', message.from_user.id).execute()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
        info_text = f"‚úÖ *–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω:*\n\n"
        info_text += f"üì± {formatted_phone}\n"
        if phone_info.get('valid'):
            info_text += f"üåç {phone_info.get('country_name')} ({phone_info.get('country_code')})\n"
            info_text += f"üìû –¢–∏–ø: {phone_info.get('number_type')}"
        
        await message.answer(info_text, parse_mode="Markdown")
        await message.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.choosing_field)
        
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@router.message(EditProfile.waiting_for_birthdate, F.text)
async def edit_birthdate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    date_string = message.text.strip()
    
    try:
        birthdate = parse_date(date_string)
        
        if birthdate > datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return
        
        age = (datetime.now() - birthdate).days // 365
        
        if age < 1 or age > 120:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
            return
        
        supabase_client.table('user_profiles').update({
            'birthdate': birthdate.date().isoformat(),
            'updated_at': datetime.now().isoformat()
        }).eq('user_id', message.from_user.id).execute()
        
        await message.answer(f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {birthdate.strftime('%d.%m.%Y')} ({age} –ª–µ—Ç)")
        await message.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.choosing_field)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.message(EditProfile.waiting_for_gender, F.text.in_(["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]))
async def edit_gender(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∞"""
    gender = "male" if message.text == "üë® –ú—É–∂—Å–∫–æ–π" else "female"
    
    try:
        supabase_client.table('user_profiles').update({
            'gender': gender,
            'updated_at': datetime.now().isoformat()
        }).eq('user_id', message.from_user.id).execute()
        
        await message.answer(f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {message.text}", reply_markup=ReplyKeyboardRemove())
        await message.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.choosing_field)
        
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.message(EditProfile.waiting_for_height, F.text)
async def edit_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text.strip())
        
        if height < 50 or height > 250:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º)")
            return
        
        supabase_client.table('user_profiles').update({
            'height': height,
            'updated_at': datetime.now().isoformat()
        }).eq('user_id', message.from_user.id).execute()
        
        await message.answer(f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {height} —Å–º")
        await message.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.choosing_field)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175)")
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.message(EditProfile.waiting_for_weight, F.text)
async def edit_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞"""
    try:
        weight = float(message.text.strip().replace(",", "."))
        
        if weight < 20 or weight > 300:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-300 –∫–≥)")
            return
        
        supabase_client.table('user_profiles').update({
            'weight': weight,
            'updated_at': datetime.now().isoformat()
        }).eq('user_id', message.from_user.id).execute()
        
        await message.answer(f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {weight} –∫–≥")
        await message.answer("–ß—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_profile_menu())
        await state.set_state(EditProfile.choosing_field)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70 –∏–ª–∏ 70.5)")
    except Exception as e:
        print(f"DB Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


# ============ –û–¢–ú–ï–ù–ê ============

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_profile_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if current_state and current_state.startswith("Registration:"):
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    elif current_state and current_state.startswith("EditProfile:"):
        await message.answer(
            "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_edit_profile_menu()
        )
        await state.set_state(EditProfile.choosing_field)
    else:
        await state.clear()
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu()
        )
